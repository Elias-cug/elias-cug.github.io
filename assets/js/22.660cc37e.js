(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{289:function(t,s,a){"use strict";a.r(s);var e=a(13),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"react"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),s("h2",{attrs:{id:"生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),s("p",[s("strong",[t._v("过程————初始化阶段")])]),t._v(" "),s("ol",[s("li",[t._v("getDefaultProps:获取实例的默认属性")]),t._v(" "),s("li",[t._v("getInitialState:获取每个实例的初始化状态")]),t._v(" "),s("li",[t._v("componentWillMount：组件即将被装载、渲染到页面上")]),t._v(" "),s("li",[t._v("render:组件在这里生成虚拟的 DOM 节点")]),t._v(" "),s("li",[t._v("componentDidMount:组件真正在被装载之后")])]),t._v(" "),s("p",[s("strong",[t._v("运行中状态")])]),t._v(" "),s("ol",[s("li",[t._v("componentWillReceiveProps:组件将要接收到属性的时候调用")]),t._v(" "),s("li",[t._v("shouldComponentUpdate:组件接受到新属性或者新状态的时候（可以返回 false，接收数据后不更新，阻止 render 调用，后面的函数不会被继续执行了）")]),t._v(" "),s("li",[t._v("componentWillUpdate:组件即将更新不能修改属性和状态")]),t._v(" "),s("li",[t._v("render:组件重新描绘")]),t._v(" "),s("li",[t._v("componentDidUpdate:组件已经更新")])]),t._v(" "),s("p",[s("strong",[t._v("销毁阶段")])]),t._v(" "),s("ol",[s("li",[t._v("componentWillUnmount:组件即将销毁")])]),t._v(" "),s("p",[s("strong",[t._v("新版生命周期")])]),t._v(" "),s("ol",[s("li",[t._v("使用 getDerivedStateFromProps 替换 componentWillMount")]),t._v(" "),s("li",[t._v("使用 getSnapshotBeforeUpdate 替换 componentWillUpdate")]),t._v(" "),s("li",[t._v("避免使用 componentWillReceiveProps")])]),t._v(" "),s("blockquote",[s("p",[t._v("其实该变动的原因正是由于上述提到的 Fiber。首先从上面我们知道 React 可以分成 reconciliation 与 commit 两个阶段> 对应的生命周期如下:")])]),t._v(" "),s("p",[t._v("reconciliation:")]),t._v(" "),s("ol",[s("li",[t._v("componentWillMount")]),t._v(" "),s("li",[t._v("componentWillReceiveProps")]),t._v(" "),s("li",[t._v("shouldComponentUpdate")]),t._v(" "),s("li",[t._v("componentWillUpdate")])]),t._v(" "),s("p",[t._v("commit:")]),t._v(" "),s("ol",[s("li",[t._v("componentDidMount")]),t._v(" "),s("li",[t._v("componentDidUpdate")]),t._v(" "),s("li",[t._v("componentWillUnmount")])]),t._v(" "),s("h2",{attrs:{id:"react-中-refs-的作用是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-中-refs-的作用是什么"}},[t._v("#")]),t._v(" React 中 refs 的作用是什么")]),t._v(" "),s("ol",[s("li",[t._v("获取子组件实例，操作子组件的一些方法")]),t._v(" "),s("li",[t._v("做持久化存储")])]),t._v(" "),s("h2",{attrs:{id:"组件通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件通信"}},[t._v("#")]),t._v(" 组件通信")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("父子组件通信\n父组件通过向子组件传递 props")])]),t._v(" "),s("li",[s("p",[t._v("子组件向父组件通信\n父组件将一个函数作为 props 传递给子组件，子组件调用回调函数")])]),t._v(" "),s("li",[s("p",[t._v("跨级组件通信\na) 中间组件层层传递 props\nb) 🍎 使用 context 对象")])]),t._v(" "),s("li",[s("p",[t._v("非嵌套组件间通信\na) 利用二者共同父组件的 context 进行通信\nb) 使用自定义事件的方式")])]),t._v(" "),s("li",[s("p",[t._v("使用 redux 进行通信")])])]),t._v(" "),s("h2",{attrs:{id:"context-使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#context-使用"}},[t._v("#")]),t._v(" context 使用")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 创建并导出 context 对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Provider"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Consumer "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" React"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 导入并使用函数获取要消费的状态")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. hook下使用 useContext 获取要消费的状态")]),t._v("\n")])])]),s("h2",{attrs:{id:"hook-下怎么使用-shouldcomponentupdate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hook-下怎么使用-shouldcomponentupdate"}},[t._v("#")]),t._v(" hook 下怎么使用 ShouldComponentUpdate")]),t._v(" "),s("p",[t._v("使用React.memo包裹组件")]),t._v(" "),s("h2",{attrs:{id:"react中函数组件与类组件的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react中函数组件与类组件的区别是什么"}},[t._v("#")]),t._v(" react中函数组件与类组件的区别是什么")]),t._v(" "),s("ol",[s("li",[t._v("函数组件是一个纯函数，它接收一个props对象返回一个react元素；而类组件需要去继承React.Component并且创建render函数返回react元素")]),t._v(" "),s("li",[t._v("函数组件没有生命周期和状态state，而类组件有")])]),t._v(" "),s("h2",{attrs:{id:"purecomponent-component-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#purecomponent-component-区别"}},[t._v("#")]),t._v(" PureComponent Component 区别")]),t._v(" "),s("ol",[s("li",[t._v("几乎相同，但是 PureComponent 通过 prop 和 state 的浅比较来实现")])]),t._v(" "),s("h2",{attrs:{id:"使用-react-的一些坑点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-react-的一些坑点"}},[t._v("#")]),t._v(" 使用 React 的一些坑点")]),t._v(" "),s("ol",[s("li",[t._v("JSX 做表达式判断时候需要强转为 boolean")]),t._v(" "),s("li",[t._v("尽量不要在 componentWillReviceProps 里使用 setState 如果一定要使用那么需要判断结束条件不然会出现无限重渲染导致页面崩溃")]),t._v(" "),s("li",[t._v("给组件添加 ref 时候尽量不要使用匿名函数因为当组件更新的时候匿名函数会被当做新的 prop 处理让 ref 属性接受到新函数的时候 react 内部会先清空 ref 也就是会以 null 为回调参数先执行一次 ref 这个 props 然后在以该组件的实例执行一次 ref 所以用匿名函数做 ref 的时候有的时候去 ref 赋值后的属性会取到 null")]),t._v(" "),s("li",[t._v("遍历子节点的时候不要用 index 作为组件的 key 进行传入")])]),t._v(" "),s("h2",{attrs:{id:"react-class-构建时-super-props-的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-class-构建时-super-props-的作用"}},[t._v("#")]),t._v(" react class 构建时，super(props)的作用")]),t._v(" "),s("p",[t._v("为了使 子组件中可以使用 this.props 调用父组件传递的 props。")]),t._v(" "),s("h2",{attrs:{id:"调用-setstate-之后发生了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调用-setstate-之后发生了什么"}},[t._v("#")]),t._v(" 调用 setState 之后发生了什么")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("将要更新的 state 压入一个待更新队列（即内部实例的_pendingStateQueue）")])]),t._v(" "),s("li",[s("p",[t._v("执行入栈更新操作 enqueueUpdate, 判断是否处于批量更新状态")])]),t._v(" "),s("li",[s("p",[t._v("如若正处于更新，那么就先把实例推进 dirtyComponents 里等待下一次批量更新")])]),t._v(" "),s("li",[s("p",[t._v("如果没有批量更新正在执行，则会调用一个批量更新任务")])]),t._v(" "),s("li",[s("p",[t._v("在代码中调用 setState 函数之后，React会将传入的参数对象语组件当前的状态合并，然后触发调和过程。经调和过程吧，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个 UI 界面。在 React 得到元素树之后，React 会自动计算出新的树语老树的节点差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。如果在短时间内频繁setState，React 会将state的改变压入栈中，在合适的时机，批量更新state和视图，达到提高性能效果。")])])]),t._v(" "),s("h2",{attrs:{id:"setstate是同步还是异步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setstate是同步还是异步"}},[t._v("#")]),t._v(" setState是同步还是异步")]),t._v(" "),s("p",[s("strong",[t._v("同步")])]),t._v(" "),s("ol",[s("li",[t._v("首先在legacy模式下")]),t._v(" "),s("li",[t._v("在执行上下问为空的时候去调用setState\n"),s("ul",[s("li",[t._v("可以使用一步调用setTimeout, Promise, MessageChannel等")]),t._v(" "),s("li",[t._v("可以监听原生事件，注意不是合成事件，在原生事件的回调函数中执行setState就是同步的")])])])]),t._v(" "),s("p",[s("strong",[t._v("异步")])]),t._v(" "),s("ol",[s("li",[t._v("如果是合成事件中的回调，executionContext !== DiscreteEventContext，所以不会进入，最终表现出异步")]),t._v(" "),s("li",[t._v("concurrent模式下都为异步")])]),t._v(" "),s("h2",{attrs:{id:"setstate-与生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setstate-与生命周期"}},[t._v("#")]),t._v(" setState 与生命周期")]),t._v(" "),s("ol",[s("li",[t._v("constructor 中不需要使用 state")]),t._v(" "),s("li",[t._v("componentWillMount 中同步的无用，异步可用于获取页面的初始数据")]),t._v(" "),s("li",[t._v("render shouldComponentUpdate 组件还没渲染结束就继续调用 setState 会无限触发更新")]),t._v(" "),s("li",[t._v("可以用 setState 的声明周期函数有，componentDidMount，componentWillReceiveProps（getDerivedStateFromProps），componentDidUpdate（注意死循环）")])]),t._v(" "),s("h2",{attrs:{id:"react-中-key-的作用是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-中-key-的作用是什么"}},[t._v("#")]),t._v(" react 中 key 的作用是什么")]),t._v(" "),s("p",[s("strong",[t._v("单节点")])]),t._v(" "),s("ol",[s("li",[t._v("key是单节点是否复用的第一判断条件（第二判断条件是type是否改变），如果key不同其他条件是完全不看的")]),t._v(" "),s("li",[t._v("在新建节点时，key随着element对象被传入fiber的构造函数")])]),t._v(" "),s("blockquote",[s("p",[t._v("所以这里才是key的核心作用，是调和函数中，针对单一节点是否可以复用的第一判断条件；对与单节点来讲key是可以省略的，react内部默认会设置成默认值null，在进行diff时由于null === null 为 true，前后render的key时一致的，可以进行复用比较；如果单节点显示的设置了key，且两次render时的key如果不一致，则无法复用")])]),t._v(" "),s("p",[s("strong",[t._v("多节点")])]),t._v(" "),s("ol",[s("li",[t._v("新队列newChildren中的每一个对象（即reactElement对象）都需要同旧队列oldFiber中有相同key值的对象（即oldFiber对象）进行是否可复用的比较。key就是心就对象能够对应起来的唯一标识")]),t._v(" "),s("li",[t._v("如果省略key或者直接使用列表index作为key，表现是一样的（key=null时，会采用index代替key进行比较）。在新旧对象比较时，只能按照index顺序进行比较，复用的成功率大大降低，大列表会出现性能问题。")])]),t._v(" "),s("blockquote",[s("p",[t._v("在react中key是服务于diff算法，它的默认值是null，在diff算法过程中，新旧节点是否可以复用，首先会判定key是否相同，其后才会进行其他条件的判定。在源码中针对多节点（即列表组件）如果直接将key设置成index和不设置任何值的处理方案是一样的，如果使用不当轻则造成性能损耗，重则引起状态混乱造成bug。")])]),t._v(" "),s("h2",{attrs:{id:"概述下-react-中的事件处理逻辑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述下-react-中的事件处理逻辑"}},[t._v("#")]),t._v(" 概述下 React 中的事件处理逻辑")]),t._v(" "),s("p",[t._v("为了解决跨浏览器兼容性问题 React 会将浏览器原生事件 Browser Native Event 封装为合成事件 SyntheticEvent 传入设置的事件处理器中。这里的合成事件提供了与原生事件相同的接口不过它们屏蔽了底层浏览器的细节差异保证了行为的一致性。另外有意思的是 React 并没有直接将事件附着到子元素上而是以单一事件监听器的方式将所有的事件发送到顶层进行处理。这样 React 在更新 DOM 的时候就不需要考虑如何去处理附着在 DOM 上的事件监听器最终达到优化性能的目的")]),t._v(" "),s("p",[t._v("区别：")]),t._v(" "),s("ol",[s("li",[t._v("对于时间名称命名方式，原生时间为全小写，react 事件采用小驼峰")]),t._v(" "),s("li",[t._v("对于时间函数处理语法，原生事件为字符串，react 事件为函数；")]),t._v(" "),s("li",[t._v("react 事件不能采用return false 的方式来阻止浏览器的默认行为，而必须要明确的调用preventDefault(）来阻止默认行为。\n合成事件是 react 模拟原生的 DOM 事件所有能力的一个事件对象，其优点如下：")]),t._v(" "),s("li",[t._v("兼容所有浏览器，更好的跨平台")]),t._v(" "),s("li",[t._v("将事件统一存放在一个数组，避免频繁的新增语删除")]),t._v(" "),s("li",[t._v("方便 react 统一管理和事务机制")]),t._v(" "),s("li",[t._v("事件的执行顺序为原生事件线执行，合成事件后执行，合成事件会冒泡绑定到 document 上，所以尽量避免合成事件与原生事件混用，如果原生事件阻止冒泡，可能会导致合成事件不执行，因为需要冒泡到 document 上合成事件才会执行。\nreact 怎么做事件代理，原理是啥")]),t._v(" "),s("li",[t._v("react 基于 virtual dom 实现了一个 syntheticEvent 层（合成事件层），定义的事件处理器会接受到一个合成事件对象的实例，它符合 w3c 标准，且与原生的浏览器事件拥有同样的借口，支持冒泡机制，所有事件都会绑定到最外层上。")])]),t._v(" "),s("h2",{attrs:{id:"hook相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hook相关"}},[t._v("#")]),t._v(" hook相关")]),t._v(" "),s("p",[s("strong",[t._v("写过什么 hooks吗")])]),t._v(" "),s("ol",[s("li",[t._v("useErrorBoundary")])]),t._v(" "),s("p",[s("strong",[t._v("hook 中持久化方式")])]),t._v(" "),s("ol",[s("li",[t._v("useRef")])]),t._v(" "),s("p",[s("strong",[t._v("useState")])]),t._v(" "),s("ol",[s("li",[t._v("可以进行函数式更新")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" changeCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevCount")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" prevCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("strong",[t._v("useRef")])]),t._v(" "),s("ol",[s("li",[t._v("挂载 dom 节点")]),t._v(" "),s("li",[t._v("模拟类组件的 this，充当持久化数据对象")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("useRef"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" useEffect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 挂载dom节点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UseRef")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" container "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useRef")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'container'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一次拿不到")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'container'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// current 属性引用着虚拟 DOM 节点 ")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button ref"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Ref容器 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 模拟类组件的this，充当持久化数据对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UseRef")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" container "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useRef")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'模拟 componentDidUpdate，即除了初始化，之后的更新进到这里'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" \n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Ref容器 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),s("p",[s("strong",[t._v("useCallback(fn, depArrs)")])]),t._v(" "),s("ol",[s("li",[t._v("目的：父组件更新不希望子组件更新")]),t._v(" "),s("li",[t._v("解决：父组件用useCallback包裹传递给子组件的函数，useCallback持久化缓存包裹的函数")]),t._v(" "),s("li",[t._v("返回函数")]),t._v(" "),s("li",[t._v("useCallback 可以对函数进行缓存， 保证 onChange 不会随着组件更新而改变引用")])]),t._v(" "),s("p",[s("strong",[t._v("memo(fn, validFn)")])]),t._v(" "),s("ol",[s("li",[t._v("props不变化，不重新渲染")]),t._v(" "),s("li",[t._v("模拟 shouldComponentUpdate")]),t._v(" "),s("li",[t._v("validFn 放个 shallowEqual")]),t._v(" "),s("li",[t._v("返回一个组件")]),t._v(" "),s("li",[t._v("包裹组件，组件层面")]),t._v(" "),s("li",[t._v("memo 会默认对所有 props 进行对比，如果不发生变化则不更新组件，避免父级引起的子级渲染")])]),t._v(" "),s("p",[s("strong",[t._v("useMemo")])]),t._v(" "),s("ol",[s("li",[t._v("和vue中component差不多，用法如useCallback")]),t._v(" "),s("li",[t._v("返回函数的调用结果")])]),t._v(" "),s("p",[s("strong",[t._v("useContext")])]),t._v(" "),s("ol",[s("li",[t._v("hooks 版本的 context")]),t._v(" "),s("li",[t._v("Context.Provider 包裹后的子组件能拿到 context")]),t._v(" "),s("li",[t._v("不受组件优化的影响")]),t._v(" "),s("li",[t._v("使用")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" useState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" createContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" useContext "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 创建共享数据源对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Context "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 父组件使用 Provider 包裹所有后代组件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" changeCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      changeCount\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Provider value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button onClick"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("加一"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Sub1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Provider"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 子组件使用 useContext 调用方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sub1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ctx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button onClick"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("c")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n         Sub1 能通过 Context 访问数据源 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),s("p",[s("strong",[t._v("useImperativeHandle + forwardRef")])]),t._v(" "),s("ol",[s("li",[t._v("限制父组件访问的范围")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("\n")])])]),s("p",[s("strong",[t._v("自定义hook")])]),t._v(" "),s("ol",[s("li",[t._v("一般使用官方的hook二次实现")])]),t._v(" "),s("p",[s("strong",[t._v("useSelector useDispatch")])]),t._v(" "),s("p",[s("strong",[t._v("useLocation, useHistory, useParams")])]),t._v(" "),s("h2",{attrs:{id:"react-中的深度优先遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-中的深度优先遍历"}},[t._v("#")]),t._v(" react 中的深度优先遍历")]),t._v(" "),s("p",[t._v("符合条件A 或者符合条件B则不会遍历其子节点，而直接判断是否有兄弟节点，如果没有兄弟节点，则回到有兄弟节点的直系父节点，重新开始外层的 while 循环")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag 符合条件"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作A ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag 符合条件"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作B ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node \n    node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" nodeRoot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" nodeRoot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return \n  node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"diff"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diff"}},[t._v("#")]),t._v(" DIFF")]),t._v(" "),s("p",[s("strong",[t._v("单节点diff")])]),t._v(" "),s("ul",[s("li",[t._v("判断是否有老的fiber节点 --》没有直接生成新fiber")]),t._v(" "),s("li",[t._v("判断key是否有相同  --》不同直接删除 再查找下一个老fiber")]),t._v(" "),s("li",[t._v("判断type是否相同  --》不同直接删除当前fiber在内的所有老的fiber --》生成新的fiber")]),t._v(" "),s("li",[t._v("删除剩下的其他老的fiber --》服用老fiber并返回")])]),t._v(" "),s("p",[s("strong",[t._v("多节点diff")])]),t._v(" "),s("ol",[s("li",[t._v("第一轮遍历")])]),t._v(" "),s("ul",[s("li",[t._v("如果key不同则直接结束本轮循环")]),t._v(" "),s("li",[t._v("newChildren或oldFiber遍历完，结束本轮循环")]),t._v(" "),s("li",[t._v("key相同而type不同，标记老的oldFiber为删除，继续循环")]),t._v(" "),s("li",[t._v("key相同而type也相同，则可以服用老oldFiber节点，继续循环")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("第二轮遍历")])]),t._v(" "),s("ul",[s("li",[t._v("newChildren遍历完而oldFiber还有，遍历剩下所有的oldFiber标记为删除，DIFF结束")]),t._v(" "),s("li",[t._v("oldFiber遍历完，而newChildren还有，将剩下的newChildren标记为插入，DIFF结束")]),t._v(" "),s("li",[t._v("newChildren和oldFiber都没有完成，则进行节点移动的逻辑")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("第三轮")])]),t._v(" "),s("ul",[s("li",[t._v("处理节点移动的情况")])]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("例子\n老：A--\x3eB--\x3eC--\x3eD--\x3eE--\x3eF\n新：A--\x3eC--\x3eE--\x3eB--\x3eG--\x3eD")])]),t._v(" "),s("ul",[s("li",[t._v("第一轮比较A和A，相同可以复用，更新，然后比较B和C，key不同直接跳出第一个循环")]),t._v(" "),s("li",[t._v("把剩下的oldFiber放入existingChildren这个map中")]),t._v(" "),s("li",[t._v("然后声明一个lastPlacedIndex变量，表示不需要移动的老节点的索引，默认为0")]),t._v(" "),s("li",[t._v("继续循环剩下的虚拟dom节点，从C开始")]),t._v(" "),s("li",[t._v("如果能在map中找到相同key相同type的节点则可以复用老fiber，并把此fiber从map中删除")]),t._v(" "),s("li",[t._v("如果在map中找不到相同key相同type的节点则创建新的fiber节点")]),t._v(" "),s("li",[t._v("如果是复用老的fiber，则判断老fiber的索引是否小于lastPlacedIndex")]),t._v(" "),s("li",[t._v("如果小于lastPlacedIndex则需要移动老fiber，lastPlacedIndex不变")]),t._v(" "),s("li",[t._v("如果大雨lastPlacedIndex则不需要移动老fiber，更新lastPlaecdIndex为老fiber的index")]),t._v(" "),s("li",[t._v("虚拟DOM循环结束吧map中所有剩下的fiber全部标记为删除")])]),t._v(" "),s("h2",{attrs:{id:"reactdom-render-element-container-callback-流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reactdom-render-element-container-callback-流程"}},[t._v("#")]),t._v(" ReactDOM.render(element, container, callback) 流程")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("创建 react root")])]),t._v(" "),s("li",[s("p",[t._v("创建 fiber root")])]),t._v(" "),s("li",[s("p",[t._v("创建 root fiber")])]),t._v(" "),s("li",[s("p",[t._v("new FiberNode 作为 RootFiber 返回")])]),t._v(" "),s("li",[s("p",[t._v("将 RootFiber 放到 root 对象的 current 属性， container 放到 containerInfo 属性，并初始化其他属性")])]),t._v(" "),s("li",[s("p",[t._v("将 RootFiber 对象的 stateNode 属性设置为 FiberRoot")])]),t._v(" "),s("li",[s("p",[t._v("返回 FiberRoot")])]),t._v(" "),s("li",[s("p",[t._v("将 FiberRoot 放到 ReactRoot 实例的 _internalRoot 上")])]),t._v(" "),s("li",[s("p",[t._v("返回 ReactRoot")])]),t._v(" "),s("li",[s("p",[t._v("将第三个参数 callback 的执行环境绑定为伏组件的 FiberRoot 对象")])]),t._v(" "),s("li",[s("p",[t._v("开始调用 ReactRoot 实例的 render 函数，传入 ReactDOM.render的第一个参数与第三个参数")])]),t._v(" "),s("li",[s("p",[t._v("创建 ReactWork 对象实例，将第三个参数传入这个实例的 _callbacks 属性上，在 container 更新提交阶段完成之后的执行回调")])]),t._v(" "),s("li",[s("p",[t._v("开始处理 container 的 fiber")])]),t._v(" "),s("li",[s("p",[t._v("计算 container 对应 fiber 的到期时间 expirationTime")])]),t._v(" "),s("li",[s("p",[t._v("为 container 的 fiber 设置 context")])]),t._v(" "),s("li",[s("p",[t._v("调用 scheduleRootUpdate 开始进入对 root 的更新调度阶段")])]),t._v(" "),s("li",[s("p",[t._v("利用到期时间创建更新器：createUpdate")])]),t._v(" "),s("li",[s("p",[t._v("将第一个 react 组件 app 作为更新器的 payload")])]),t._v(" "),s("li",[s("p",[t._v("将第三个参数回调函数执行器作为更新器的 callback")])]),t._v(" "),s("li",[s("p",[t._v("刷新副作用，与commitRoot相关")])]),t._v(" "),s("li",[s("p",[t._v("将更新器加入 container 的 fiber 上的更新队列中 enqueueUpdate")])]),t._v(" "),s("li",[s("p",[t._v("scheduleWork(current, expirationTime) 正式进入对 container 的fiber树的循环更新调度阶段")])]),t._v(" "),s("li",[s("p",[t._v("开始对 fiber 树更新任务进行调度")])]),t._v(" "),s("li",[s("p",[t._v("将当前更新任务对应的到期时间与当前 fiber 上存储的最高优先级更新任务到期时间相比，来更新 fiber.expirationTime。从发生更新任务的 fiber 开始往上遍历更新fiber树上每个节点的 childExpirationTime, 这个值对应着这个 fiber 子树上优先级最高的更新任务的到期时间。current-fiber 与 workingprogress-fiber都会进行同样的处理。最终遍历到rootfiber之后，结束遍历并返回fiber.stateNode")])]),t._v(" "),s("li",[s("p",[t._v("如果当前           不处于renderRoot与commitRoot的阶段，并且之前有更新任务需要执行，并且当前的更新任务的到期时间比计划执行的更新任务到期时间的优先级高，则记录下打断计划任务的这个fiber到interruptedBy上，然后调用resetStack重置栈。")])]),t._v(" "),s("li",[s("p",[t._v("利用 expirationTime 来更新 fiberRoot 上记录的所有子节点更新任务到期时间的区间[earliestPendingTIme, lastestPendingTime], 这个区间是root树上的还未更新的任务到期时间的区间")])]),t._v(" "),s("li",[s("p",[t._v("当前发生的更新任务的到期时间expirationTime与fiberRoot上更新任务到期时间[earliestPendingTIme, lastestPendingTime]比较，如果落在区间内，则不需要修改区间；否则更改区间的某一个边界")])]),t._v(" "),s("li",[s("p",[t._v("设置 root.nextExplrationTimeToWorkOn: 如果earliesPendingTime !== 0 即存在需要更新的任务，那么 nextExpirationTimeToWorkOn为earliestPendingTime。否则表示不存在需要更新的任务，那么如果latestPingedTime !== 0 即存在需要渲染为suspend组件，那么nextExpirationTimeToWorkOn为lastestPingedTime。否则将当前更新任务到期时间与[earliestSuspendedTime,lastestSuspendTime]。设置 root.expirationTimeToWorkOn优先级最高的到期时间。")])]),t._v(" "),s("li",[s("p",[t._v("如果当前不处于renderRoot与commitRoot函数执行阶段或者处于commitRoot阶段或者下渲染的是其他root，则调用requestWork就开始对rootFiber进行调度")])])]),t._v(" "),s("h2",{attrs:{id:"react-数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-数据结构"}},[t._v("#")]),t._v(" react 数据结构")]),t._v(" "),s("ol",[s("li",[t._v("FiberRootNode")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FiberRootNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("containerInfo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hydrate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// LegacyRoot, BlockingRoot, ConcurrentRoot ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("containerINfo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" containerInfo "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// root节点，render函数的第二个参数")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// current: Fiber 对象，对应的是 root 节点，即整个应用根对象")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("finishedWork "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在commit阶段只会处理该值对应的任务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("blockquote",[s("p",[t._v("FiberRoot --\x3e rootFiber --\x3e App\nFiberRoot 在整个应用中只能有一个，RootFiber可以有多个(可以写多个, ReactDom.render()方法)")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("FiberNode")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FiberNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// instance ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前 Fiber 的类型：ClassComponent FunctionComponent HostComponent ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elementType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" \n  \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fiber 链表 ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向父级组件")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向子级fiber ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向兄弟fiber  ")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" \n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新相关")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pendingProps  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将要执行更新的属性")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上一次更新的 props ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新队列")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上一次更新的State ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dependencies "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个列表存在fiber依赖的contexts，events ")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypedOfMode, StrictNode / COncurrentMode ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mode \n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Effects ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoFlags "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前 fiber 阶段需要进行任务，包括：占位，更新，删除等")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单链表用来快速查找下一个side Effect ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子树中第一个 side effect ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子树中最后一个 side effect ")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 和 lanes 优先级相关")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lanes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoLanes "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示当前节点是否需要更新")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childLanes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoLanes "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示当前节点的子节点是否需要更新")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// current树和workInProgress树中节点相互关联的属性")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以用于判断是否需要更新还是创建，有值表示更新，反之则需要创建")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"render-流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#render-流程"}},[t._v("#")]),t._v(" render 流程")]),t._v(" "),s("p",[t._v("render的时候首先会创建一个fiberRoot，创建一个workInProcess（正在内存中构建的fiber树），benginwork，completeWork")]),t._v(" "),s("h2",{attrs:{id:"fiber双缓存解决什么问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fiber双缓存解决什么问题"}},[t._v("#")]),t._v(" fiber双缓存解决什么问题")]),t._v(" "),s("p",[t._v("出现更新的时候首先在内存中修改这颗虚拟的树，更新完成之后，再commitRoot更新到用户界面")]),t._v(" "),s("h2",{attrs:{id:"优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优先级"}},[t._v("#")]),t._v(" 优先级")]),t._v(" "),s("ol",[s("li",[t._v("什么时候分配优先级？ 创建fiberNode时")]),t._v(" "),s("li",[t._v("LanePriority（调和器里面） schedulePriority（调度器里面） ReactPriorityLevel（调和器里面）")]),t._v(" "),s("li",[t._v("schedulePriority 和 LanePriority")])]),t._v(" "),s("h2",{attrs:{id:"scheduler-调度管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduler-调度管理"}},[t._v("#")]),t._v(" scheduler 调度管理")]),t._v(" "),s("ol",[s("li",[t._v("两大工作任务")]),t._v(" "),s("li",[t._v("任务如何中断，如何执行\n根据优先级情况中断，")]),t._v(" "),s("li",[t._v("requestIdleCallback")]),t._v(" "),s("li",[t._v("messageChannel 作用")])]),t._v(" "),s("ul",[s("li",[t._v("生成浏览器EventLoop中的一个宏任务，实现将主线程还给浏览器，以便浏览器更新页面")]),t._v(" "),s("li",[t._v("浏览器更新页面后能够继续执行未完成的Scheduler中的任务")]),t._v(" "),s("li",[t._v("不用微任务迭代的原因是，微任务将在页面更新前全部执行完，达不到主线程还给浏览器的目的")]),t._v(" "),s("li",[t._v("选择 MessageChannel  的原因是因为 setTimeout(fn, 0)所创建的宏任务至少4ms的执行时差")])]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("shouldYield")]),t._v(" "),s("li",[t._v("taskQueue 小顶堆")])]),t._v(" "),s("h2",{attrs:{id:"concurrent模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrent模式"}},[t._v("#")]),t._v(" concurrent模式")]),t._v(" "),s("p",[t._v("将渲染工作分解为多个部分，对任务进行暂停和恢复操作以避免阻塞浏览器。这意味着React可以再提交之前多次调用渲染阶段生命周期的方法，或者在不提交的情况下调用他们\n整个scheduler的任务调度，时间切片，任务中断及恢复都依赖于concurent模式及Fiber数据结构")])])}),[],!1,null,null,null);s.default=n.exports}}]);