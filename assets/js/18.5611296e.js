(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{284:function(_,v,t){"use strict";t.r(v);var l=t(13),i=Object(l.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"网络"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[_._v("#")]),_._v(" 网络")]),_._v(" "),v("h2",{attrs:{id:"ssl握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ssl握手"}},[_._v("#")]),_._v(" SSL握手")]),_._v(" "),v("p",[v("strong",[_._v("要做什么事情")])]),_._v(" "),v("ol",[v("li",[_._v("交换协议版本号")]),_._v(" "),v("li",[_._v("选择一个两端都了解的密码")]),_._v(" "),v("li",[_._v("对两端的身份进行认证")]),_._v(" "),v("li",[_._v("生成临时的会话密钥，以便加密信道")])]),_._v(" "),v("p",[v("strong",[_._v("握手过程")])]),_._v(" "),v("ol",[v("li",[v("p",[_._v("建立到服务器端口 443 的 tcp 连接")])]),_._v(" "),v("li",[v("p",[_._v("SSL 安全参数握手")]),_._v(" "),v("p",[_._v("1). 客户端发送过一个它自己支持的算法列表，同时发送的含有不重数 nonce1")]),_._v(" "),v("p",[_._v("2). 服务器从列表中选择算法：发送回来它的算法选择+服务器证书+服务器不重数nonce2")]),_._v(" "),v("p",[_._v("3). "),v("strong",[_._v("客户端验证证书")]),_._v("，提取出服务器的公钥，生成pre_master_secret（采用服务器 加密的），发送到服务器")]),_._v(" "),v("p",[_._v("4). 客户端和服务器从pre_master_secret 和 2 个 nonces 独立地计算出主密钥MS。（由MS切片得到2个数据传输密钥和2个MAC密钥保证数据完整性的一种密钥）")]),_._v(" "),v("p",[_._v("5). 客户端发送一个整个握手阶段报文的MAC")]),_._v(" "),v("p",[_._v("6). 服务器发送一个整个握手阶段报文的MAC")])]),_._v(" "),v("li",[v("p",[_._v("在 SSL 上发送 HTTP 请求/在 TCP 上发送已加密请求")])]),_._v(" "),v("li",[v("p",[_._v("在 SSL 上发送 HTTP 响应/ 在 TCP 上发送已加密的响应")])]),_._v(" "),v("li",[v("p",[_._v("SSL 关闭通知")])]),_._v(" "),v("li",[v("p",[_._v("TCP 连接关闭")])])]),_._v(" "),v("blockquote",[v("p",[_._v("MAC是指消息认真码（带密钥的hash函数）：密码学中，通信实体双方使用的一种验证机制，保证消息数据完整性的一种工具。")])]),_._v(" "),v("p",[v("strong",[_._v("证书验证")])]),_._v(" "),v("blockquote",[v("p",[_._v("SSL 自身不要求用户检查 Web 服务器证书，但大部分现代浏览器会对证书进行简单的完整性检查。网景公司提出的一种 web 服务器证书有效性算法时大部分浏览器有效性验证的基础的基础。")])]),_._v(" "),v("ol",[v("li",[v("p",[_._v("日期检测")])]),_._v(" "),v("li",[v("p",[_._v("签名颁发者可信度检测 --》🍎 证书链")]),_._v(" "),v("p",[_._v("每个证书都是由某些证书颁发机构（CA）签发的，他们负责为服务器担保。任何人都可以生成证书，但有一些很著名。浏览器会附带一个签名颁发机构的受信列表。如果收到未知的，就会警告。")])]),_._v(" "),v("li",[v("p",[_._v("签名检测")]),_._v(" "),v("p",[_._v("一旦判定签名授权时可信的，浏览器就要对签名使用签名颁发机构的公开密钥并将其与校验码进行比较，以查看证书的完整性")])]),_._v(" "),v("li",[v("p",[_._v("站点身份检测")]),_._v(" "),v("p",[_._v("为防止服务器赋值其他人的证书，或拦截其他人的流量，大部分浏览器都会试着去验证证书中的域名与他们所对话的服务器域名是否匹配。")])])]),_._v(" "),v("p",[v("strong",[_._v("常见的算法")])]),_._v(" "),v("ol",[v("li",[_._v("对称加密算法：DES AES")]),_._v(" "),v("li",[_._v("非对称加密算法：RSA")]),_._v(" "),v("li",[_._v("报文摘要算法：MD5 SHA-1")])]),_._v(" "),v("p",[v("strong",[_._v("不加密的通信带来什么问题")])]),_._v(" "),v("ol",[v("li",[_._v("窃听风险（eavesdropping）：第三方可以获知通信内容")]),_._v(" "),v("li",[_._v("篡改风险（tampering）：第三方可以修改通信内容")]),_._v(" "),v("li",[_._v("冒充风险（pretending）：第三方可以冒充他人身份参与通信")])]),_._v(" "),v("h2",{attrs:{id:"http-2-x"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-2-x"}},[_._v("#")]),_._v(" http/2.x")]),_._v(" "),v("p",[v("strong",[_._v("二进制分帧")])]),_._v(" "),v("ol",[v("li",[_._v("帧（frame）包含部分：类型type，长度Length，标记Flags，流标识Stream和frame payload有效载荷。")]),_._v(" "),v("li",[_._v("消息：一个完整的请求或者响应，比如请求，响应等。由一个或多个frame组成")]),_._v(" "),v("li",[_._v("流：流是链接中的一个虚拟信道，可以承载双向消息传输。每个流有唯一整数标识。为防止两端流ID冲突，客户端发起的流具有奇数ID，服务端发起的流具有偶数ID。")])]),_._v(" "),v("p",[v("strong",[_._v("多路复用")])]),_._v(" "),v("p",[_._v("有了新的分帧机制后，http/2不再依赖多个TCP链接去实现多流并行了。每个数据流都没拆分成很多互不依赖的帧，而这些帧可以乱序发送，还可以分优先级，最后再在另一端把他们重新组合起来。\nhttp/2连接都是持久化的，而且客户端与服务器之间也需要一个连接（每个域名一个连接）。http/2可以承载数十或数百个流的复用，多路复用意味着来自很多流的数据包能够混合在一起通过同样的连接传输。当到达终点时，再根据不同帧的首部的流标识重新连接将不同的数据流进行组装")]),_._v(" "),v("p",[v("strong",[_._v("头部压缩")])]),_._v(" "),v("p",[_._v("http/2使用encoder来减少需要传输的header大小，通讯双方各自缓存一份头部字段表，既避免了重复header的传输，又减少了需要传输的大小。")]),_._v(" "),v("p",[_._v("http/2关注的是首部压缩，http/2使用的是专门为首部压缩设计的HPACK算法")]),_._v(" "),v("p",[v("strong",[_._v("请求优先级")])]),_._v(" "),v("ol",[v("li",[v("p",[_._v("把http消息分为很多独立帧后，就可以通过优化这些帧的交错和传输顺序进一步优化性能")])]),_._v(" "),v("li",[v("p",[_._v("服务器可以根据流的优先级，控制资源分配，而在响应数据准备好后优先将最高优先级的帧发送给客户端")])])]),_._v(" "),v("p",[v("strong",[_._v("服务端推送")])]),_._v(" "),v("p",[_._v("服务器可以对一个客户端请求发送多个响应，服务端向客户端推送资源无需明确的请求。并且，服务端推送能把客户端所需要的资源伴随index.html一起发送客户端，省去了客户端重复请求的步骤")]),_._v(" "),v("p",[v("strong",[_._v("http/2性能瓶颈")])]),_._v(" "),v("p",[_._v("启用http/2后会给性能带来很大的提升，但同时也带来新的性能瓶颈。因为现在所有的压力都集中在底层一个TCP连接之上，TCP很可能就是下一个性能瓶颈。")]),_._v(" "),v("h2",{attrs:{id:"websocket"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[_._v("#")]),_._v(" websocket")]),_._v(" "),v("blockquote",[v("p",[_._v("WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。允许服务端主动向客户端推送数据，浏览器和服务器只需要一次握手，俩者之间就可以创建持久性的连接，进行双向数据传输。")])]),_._v(" "),v("p",[v("strong",[_._v("WebSocket 特点")])]),_._v(" "),v("ol",[v("li",[_._v("通信可以由客户端和服务端双向发送")]),_._v(" "),v("li",[_._v("建立在TCP链接之上，服务端比较容易实现")]),_._v(" "),v("li",[_._v("与HTTP协议有良好的兼容性。默认端口也是80和443，并且握手阶段采用HTTP协议，因此握手时不容易屏蔽，能通过各种HTTP代理服务器")]),_._v(" "),v("li",[_._v("数据格式比较轻量，性能开销小，通信高效")]),_._v(" "),v("li",[_._v("可以发送文本，也可以发送二进制数据")]),_._v(" "),v("li",[_._v("没有同源限制，客户端可以与任意服务器通信")]),_._v(" "),v("li",[_._v("协议标识符是ws（加密为wws），服务器网址就是URL")])]),_._v(" "),v("h2",{attrs:{id:"强缓存-协商缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#强缓存-协商缓存"}},[_._v("#")]),_._v(" 强缓存&协商缓存")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("什么时候命中强缓冲？max-age / Expires")])]),_._v(" "),v("li",[v("p",[_._v("什么时候命中协商缓冲？未命中强缓存 --》协商缓存的两对请求头")])]),_._v(" "),v("li",[v("p",[_._v("怎么设置缓冲？")]),_._v(" "),v("ul",[v("li",[_._v("强缓冲：max-age/Expires")]),_._v(" "),v("li",[_._v("协商缓存：Last-Modified/if-Modified-Since；Etag/if-None-Match")])])]),_._v(" "),v("li",[v("p",[_._v("怎么设置不缓冲？")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("no-store: 缓存中不得存储任何关于客户端请求和服务端响应的内容。每次由客户端发起的请求都会下载完整的响应内容。")])]),_._v(" "),v("li",[v("p",[_._v("no-cache: 每次有请求发出时，缓存会将此请求发到服务器（译者注：该请求应该会带有与本地缓存相关的验证字段），服务器端会验证请求中所描述的缓存是否过期，若未过期（注：实际就是返回304），则缓存才使用本地缓存副本。")])])])]),_._v(" "),v("li",[v("p",[_._v("缓冲中常用头部及用法？")]),_._v(" "),v("ul",[v("li",[_._v("Cache-control")]),_._v(" "),v("li",[_._v("Last-Modified/if-Modified-Since")]),_._v(" "),v("li",[_._v("Etag/if-None-Match")])])]),_._v(" "),v("li",[v("p",[_._v("max-age的两种个值？--》注意区别下 cookie 的 max-age")]),_._v(" "),v("ul",[v("li",[_._v("0：其实就是走协商缓存，效果等同于 no-cache")]),_._v(" "),v("li",[_._v("整数：多少秒后过期")])])]),_._v(" "),v("li",[v("p",[_._v("Last-Modified/if-Modified-Since的缺点？")]),_._v(" "),v("ul",[v("li",[_._v("不能精确到秒 --》有什么影响？在一秒内修改了，反应不到；文件换了，但内容没改，不会走缓存。")])])]),_._v(" "),v("li",[v("p",[_._v("URL + 版本号")])])]),_._v(" "),v("h2",{attrs:{id:"http-的头部"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-的头部"}},[_._v("#")]),_._v(" http 的头部")]),_._v(" "),v("ol",[v("li",[_._v("请求头包含请求行（请求方法，请求url，版本），首部")]),_._v(" "),v("li",[_._v("响应头包含响应行（版本，状态，原因短语），首部")]),_._v(" "),v("li",[_._v("head方法：了解资源情况，根据状态码查看某个对象是否存在，测试资源是否被修改")]),_._v(" "),v("li",[_._v("options方法：请求web服务器告知其支持的各种功能。可以询问服务器通常支持那些方法，或者对某些特殊资源支持那些方法。")])]),_._v(" "),v("h2",{attrs:{id:"http规范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http规范"}},[_._v("#")]),_._v(" http规范")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("restful")]),_._v(" "),v("ul",[v("li",[_._v("协议：使用https")]),_._v(" "),v("li",[_._v("域名：应尽量将 api 部署在专有域名之下")]),_._v(" "),v("li",[_._v("版本：应将 API 的版本号放入 URL")]),_._v(" "),v("li",[_._v('路径：在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的"集合"（collection），所以API中的名词也应该使用复数。')]),_._v(" "),v("li",[_._v("HTTP 动词\n"),v("ul",[v("li",[_._v("get 获取")]),_._v(" "),v("li",[_._v("post 创建")]),_._v(" "),v("li",[_._v("put 在服务器更新资源（客户端提供改变后的完整资源）")]),_._v(" "),v("li",[_._v("patch 在服务器更新资源（客户端提供改变的属性）")]),_._v(" "),v("li",[_._v("delete 从服务器删除资源")]),_._v(" "),v("li",[_._v("head 获取资源的元数据")]),_._v(" "),v("li",[_._v("options 获取信息，关于资源的哪些属性是客户端可以改变的")])])]),_._v(" "),v("li",[_._v("过滤信息：如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。")]),_._v(" "),v("li",[_._v("状态码：")]),_._v(" "),v("li",[_._v("错误处理：")]),_._v(" "),v("li",[_._v("Hypermedia API")]),_._v(" "),v("li",[_._v("API的身份认证应该使用OAuth 2.0框架。")]),_._v(" "),v("li",[_._v("服务器返回的数据格式，应该尽量使用JSON，避免使用XML。")])])]),_._v(" "),v("li",[v("p",[_._v("soa")])])]),_._v(" "),v("h2",{attrs:{id:"tcp-和-udp-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-的区别"}},[_._v("#")]),_._v(" tcp 和 udp 的区别")]),_._v(" "),v("p",[_._v("功能：upd不提供复杂的控制机制，利用IP提供面向无连接的通信服务，是不可靠的传输。TCP面向有连接的通信服务，提供了重发控制，顺序控制，流量控制（窗口大小），拥塞控制（慢启动阈值）等控制机制")]),_._v(" "),v("p",[_._v("使用场景：UDP适用于包总量较少的通信（DNS, SNMP）；视频、音频等多媒体通信；广播通信等")]),_._v(" "),v("h2",{attrs:{id:"cdn"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cdn"}},[_._v("#")]),_._v(" CDN")]),_._v(" "),v("blockquote",[v("p",[_._v("CDN 是一个内容分发网络，通过对源网站资源的缓存，利用本身多台位于不同地域、不同运营商的服务器，向用户提供"),v("strong",[_._v("资源就近访问功能")]),_._v("。有利于提高网站的访问速度，同时通过这种方式也减轻了原服务器的访问压力。")])]),_._v(" "),v("p",[v("strong",[_._v("CDN访问过程")])]),_._v(" "),v("ol",[v("li",[_._v("用户输入访问的域名，操作系统向 localDNS 查询域名的 IP 地址")]),_._v(" "),v("li",[_._v("LocalDNS 向 ROOT DNS 查询域名的授权服务器")]),_._v(" "),v("li",[_._v("ROOT DNS 将域名授权 DNS 记录回应给 LocalDNS")]),_._v(" "),v("li",[_._v("向域名授权 DNS 查询域名 IP 地址")]),_._v(" "),v("li",[_._v("域名授权 DNS 查询域名记录后，回应给 LocalDNS")]),_._v(" "),v("li",[_._v("localDNS得到域名记录后，向智能调度 DNS 查询域名的 IP 地址")]),_._v(" "),v("li",[_._v("智能调度 DNS 根据一定的算法和策略，将最合适的 CDN 节点 ip 回应给 localDNS")]),_._v(" "),v("li",[_._v("LocalDNS将得到的域名 ip 地址，回应给客户端")]),_._v(" "),v("li",[_._v("客户端得到域名 ip 地址后，访问站点服务器")]),_._v(" "),v("li",[_._v("CDN 节点服务器应答请求，将内容返回给客户端（缓存服务器一方面在本地进行保存，以备后续使用，另一方面把获取的数据返回给客户端，完成数据服务的整个过程）")])])])}),[],!1,null,null,null);v.default=i.exports}}]);